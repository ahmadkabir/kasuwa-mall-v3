import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { 
  ShoppingCart, 
  CreditCard, 
  User, 
  Mail, 
  MapPin, 
  Phone, 
  Plus, 
  Home, 
  Building, 
  Banknote, 
  Smartphone, 
  AlertCircle, 
  CheckCircle, 
  Lock,
  Package,
  Clock
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { AddressModal } from '@/components/modals/address-modal';
import { useUserStore } from '@/store/user-store';
import { useCartStore } from '@/store/cart-store';
import { useToast } from '@/components/ui/use-toast';
import { productApi } from '@/lib/api/client';
import { getProductImageUrl } from '@/lib/utils/image';
import { addressApi, paymentApi, orderApi } from '@/lib/api/checkout-api';

interface Address {
  id: number;
  user_id: string;
  address_type: 'home' | 'work' | 'other';
  first_name: string;
  last_name: string;
  phone: string;
  address_line_1: string;
  address_line_2?: string;
  city: string;
  state: string;
  postal_code?: string;
  country: string;
  is_default: boolean;
  created_at: string;
  updated_at: string;
}

interface CheckoutFormData {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address: string;
  city: string;
  state: string;
  postalCode: string;
}

interface PaymentMethod {
  id: string;
  name: string;
  description: string;
  icon: any;
  type: 'card' | 'transfer' | 'whatsapp';
}

export default function CheckoutPage() {
  const { user, isAuthenticated } = useUserStore();
  const { items, getTotalPrice, getTotalItems, clearCart } = useCartStore();
  const { toast } = useToast();
  const navigate = useNavigate();
  const [isProcessing, setIsProcessing] = useState(false);
  const [selectedAddressId, setSelectedAddressId] = useState<number | null>(null);
  const [showNewAddressForm, setShowNewAddressForm] = useState(false);
  const [showAddressModal, setShowAddressModal] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState<Address | null>(null);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('whatsapp');
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [orderSuccess, setOrderSuccess] = useState(false);
  const [transactionRef, setTransactionRef] = useState('');

  // Payment methods available
  const paymentMethods: PaymentMethod[] = [
    {
      id: 'whatsapp',
      name: 'WhatsApp Order',
      description: 'Contact seller via WhatsApp (Recommended)',
      icon: Smartphone,
      type: 'whatsapp'
    },
    {
      id: 'card',
      name: 'Credit/Debit Card',
      description: 'Pay with Visa, Mastercard via Interswitch',
      icon: CreditCard,
      type: 'card'
    },
    {
      id: 'transfer',
      name: 'Bank Transfer',
      description: 'Direct bank transfer',
      icon: Banknote,
      type: 'transfer'
    }
  ];

  // User addresses state
  const [savedAddresses, setSavedAddresses] = useState<Address[]>([]);
  const [loadingAddresses, setLoadingAddresses] = useState(true);

  const [formData, setFormData] = useState<CheckoutFormData>({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    state: '',
    postalCode: ''
  });

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      toast({
        title: 'Authentication Required',
        description: 'Please log in to proceed with checkout.',
        variant: 'destructive',
      });
      navigate('/login?returnUrl=/checkout');
    }
  }, [isAuthenticated, navigate, toast]);

  // Fetch user addresses from backend
  const fetchUserAddresses = async () => {
    if (!user) return;

    setLoadingAddresses(true);
    try {
      const token = localStorage.getItem('@@token');
      const response = await fetch(`/api/user-address?user_id=${user.id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setSavedAddresses(data.addresses);

          // Set default address as selected
          const defaultAddress = data.addresses.find((addr: Address) => addr.is_default);
          if (defaultAddress) {
            setSelectedAddress(defaultAddress);
            setSelectedAddressId(defaultAddress.id);
            // Auto-fill form with default address
            setFormData(prev => ({
              ...prev,
              firstName: defaultAddress.first_name,
              lastName: defaultAddress.last_name,
              phone: defaultAddress.phone,
              address: defaultAddress.address_line_1,
              city: defaultAddress.city,
              state: defaultAddress.state,
              postalCode: defaultAddress.postal_code || ''
            }));
          } else if (data.addresses.length > 0) {
            // If no default, select first address
            const firstAddress = data.addresses[0];
            setSelectedAddress(firstAddress);
            setSelectedAddressId(firstAddress.id);
            // Auto-fill form with first address
            setFormData(prev => ({
              ...prev,
              firstName: firstAddress.first_name,
              lastName: firstAddress.last_name,
              phone: firstAddress.phone,
              address: firstAddress.address_line_1,
              city: firstAddress.city,
              state: firstAddress.state,
              postalCode: firstAddress.postal_code || ''
            }));
          }
        } else {
          setSavedAddresses([]);
        }
      } else {
        console.log('Attempting to fetch addresses for user:', user.id);
      console.error('Failed to fetch addresses');
        setSavedAddresses([]);
      }
    } catch (error) {
      console.error('Error fetching user addresses:', error);
      setSavedAddresses([]);
    } finally {
      setLoadingAddresses(false);
    }
  };

  // Fetch addresses when user is available
  useEffect(() => {
    console.log('User availability changed:', user);
    if (user) {
      fetchUserAddresses();
    }
  }, [user?.id]);

  // Pre-fill form with user data
  useEffect(() => {
    if (user) {
      setFormData(prev => ({
        ...prev,
        firstName: user.firstname || '',
        lastName: user.lastname || '',
        email: user.email || '',
        phone: user.phone || ''
      }));
    }
  }, [user]);

  // Handle address selection from modal
  const handleAddressSelect = (address: Address) => {
    setSelectedAddress(address);
    setSelectedAddressId(address.id);
    setFormData(prev => ({
      ...prev,
      firstName: address.first_name,
      lastName: address.last_name,
      phone: address.phone,
      address: address.address_line_1,
      city: address.city,
      state: address.state,
      postalCode: address.postal_code || ''
    }));
    setShowNewAddressForm(false);
  };

  // Handle address selection
  const handleAddressSelection = (addressId: string) => {
    if (addressId === 'new') {
      setShowNewAddressForm(true);
      setSelectedAddressId(null);
      setSelectedAddress(null);
      // Clear address fields for new address
      setFormData(prev => ({
        ...prev,
        phone: '',
        address: '',
        city: '',
        state: '',
        postalCode: ''
      }));
    } else {
      const addressIdNum = parseInt(addressId);
      const selectedAddr = savedAddresses.find(addr => addr.id === addressIdNum);
      if (selectedAddr) {
        handleAddressSelect(selectedAddr);
      }
    }
  };

  const getAddressIcon = (type: string) => {
    switch (type) {
      case 'home': return Home;
      case 'work': return Building;
      default: return MapPin;
    }
  };

  // Handle opening address modal
  const handleChangeAddress = () => {
    setShowAddressModal(true);
  };

  // Redirect if cart is empty
  useEffect(() => {
    if (isAuthenticated && getTotalItems() === 0) {
      toast({
        title: 'Empty Cart',
        description: 'Your cart is empty. Add some items before checkout.',
        variant: 'destructive',
      });
      navigate('/cart');
    }
  }, [isAuthenticated, getTotalItems, navigate, toast]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Save new address to backend
  const saveNewAddress = async (addressData: Partial<Address>) => {
    if (!user) {
      toast({
        title: 'Authentication Error',
        description: 'You must be logged in to save an address.',
        variant: 'destructive',
      });
      return false;
    }

    try {
      const token = localStorage.getItem('@@token');
      if (!token) {
        toast({
          title: 'Authentication Error',
          description: 'No authentication token found. Please log in again.',
          variant: 'destructive',
        });
        return false;
      }

      // Prepare the request body
      const requestBody = {
        user_id: user.id,
        address_type: 'home',
        first_name: addressData.first_name || user.firstname || '',
        last_name: addressData.last_name || user.lastname || '',
        phone: addressData.phone || user.phone || '',
        address_line_1: addressData.address_line_1 || '',
        city: addressData.city || '',
        state: addressData.state || '',
        postal_code: addressData.postal_code || '',
        country: 'Nigeria',
        is_default: savedAddresses.length === 0 // First address becomes default
      };

      console.log('Saving address with data:', requestBody); // Debug log

      const response = await fetch('/api/user-address', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      const result = await response.json();
      console.log('Address save response:', result); // Debug log

      if (response.ok && result.success) {
        toast({
          title: 'Address Saved',
          description: 'Your address has been saved for future orders.',
        });
        // Refresh addresses
        fetchUserAddresses();
        return true;
      } else {
        toast({
          title: 'Failed to Save Address',
          description: result.message || 'Please check your information and try again.',
          variant: 'destructive',
        });
        return false;
      }
    } catch (error) {
      console.error('Error saving address:', error);
      toast({
        title: 'Network Error',
        description: 'Could not connect to the server. Please try again later.',
        variant: 'destructive',
      });
      return false;
    }
  };

  // Generate transaction reference
  useEffect(() => {
    const txnRef = `txn_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
    setTransactionRef(txnRef);
  }, []);

  // Interswitch payment callback
  const paymentCallback = async (response: any) => {
    const txnRef = response.txnref || response.txn_ref || response.reference || '';
    const amountInKobo = (getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)) * 100;
    const merchantCode = 'MX162337';

    if (
      response.resp === '00' ||
      response.desc === 'Approved by Financial Institution'
    ) {
      setIsProcessing(true);
      toast({
        title: 'Payment Processing',
        description: 'Verifying payment...',
      });

      try {
        // Immediate verification with Interswitch API
        const verifyResp = await fetch(
          `https://webpay.interswitchng.com/collections/api/v1/gettransaction.json?merchantcode=${merchantCode}&transactionreference=${txnRef}&amount=${amountInKobo}`,
          {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
          }
        );

        const verifyData = await verifyResp.json();
        console.log('Interswitch verification result:', verifyData);

        if (verifyData.ResponseCode === '00') {
          // Save payment response to backend
          await fetch('/api/payment/verify', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('@@token')}`
            },
            body: JSON.stringify({
              transactionreference: txnRef,
              ResponseCode: verifyData.ResponseCode,
              Amount: verifyData.Amount,
            })
          });

          // Create order
          const orderCreated = await createOrder();
          
          if (orderCreated) {
            clearCart();
            setOrderSuccess(true);
            setShowPaymentModal(false);
            
            toast({
              title: 'Payment Successful!',
              description: 'Your order has been placed and payment confirmed.',
            });
          }
          setIsProcessing(false);
          return;
        }
      } catch (err) {
        console.error('Immediate verification failed', err);
      }

      // Fallback: Poll backend for payment confirmation
      let attempts = 0;
      const interval = setInterval(async () => {
        attempts++;
        try {
          const res = await fetch('/api/payment/status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('@@token')}`
            },
            body: JSON.stringify({ reference: txnRef })
          });

          const data = await res.json();
          if (data.status === 'success') {
            clearInterval(interval);
            
            const orderCreated = await createOrder();
            if (orderCreated) {
              clearCart();
              setOrderSuccess(true);
              setShowPaymentModal(false);
              
              toast({
                title: 'Payment Successful!',
                description: 'Your order has been placed and payment confirmed.',
              });
            }
            setIsProcessing(false);
          }
        } catch (err) {
          console.error('Error checking payment status', err);
        }

        if (attempts > 12) {
          // ~1 minute timeout
          clearInterval(interval);
          setIsProcessing(false);
          toast({
            title: 'Payment Timeout',
            description: 'Payment confirmation timed out. Please contact support.',
            variant: 'destructive',
          });
        }
      }, 5000);
    } else {
      setIsProcessing(false);
      toast({
        title: 'Payment Failed',
        description: 'Payment was not successful. Please try again.',
        variant: 'destructive',
      });
    }
  };

  // Check for payment response in URL after returning from Interswitch
  // This should run once when the component mounts to handle redirects
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const response = urlParams.get('resp') || urlParams.get('response');
    const txnRef = urlParams.get('transactionreference');
    
    if (response || txnRef) {
      // Process the payment response
      paymentCallback({
        resp: response,
        txn_ref: txnRef
      });
    }
  }, []); // Run only on mount

  // Handle card payment with Interswitch
  const handleCardPayment = async () => {
    setIsProcessing(true);
    
    try {
      // 1. Initiate payment in backend
      const response = await fetch('/api/payment/initiate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('@@token')}`
        },
        body: JSON.stringify({
          reference_number: transactionRef,
          amount: (getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)) * 100, // Amount in kobo
          userId: user?.id
        })
      });

      if (response.ok) {
        toast({
          title: 'Initiating Payment',
          description: 'Redirecting to secure payment gateway...',
        });
        
        // 2. Close the payment modal and redirect to Interswitch
        setShowPaymentModal(false);
        
        // Create and submit the form to Interswitch
        // Instead of opening in a new tab, we'll redirect the current window to maintain proper flow
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = 'https://webpay.interswitchng.com/collections/w/pay';
        form.target = '_self'; // Redirect current window
        form.style.display = 'none';

        const fields = {
          merchant_code: "MX162337",
          pay_item_id: "Default_Payable_MX162337",
          txn_ref: transactionRef,
          amount: ((getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)) * 100).toString(),
          currency: 'NGN',
          site_redirect_url: `${window.location.origin}/checkout`, 
          cust_email: user?.email || '',
          cust_name: `${user?.firstname || ''} ${user?.lastname || ''}`.trim(),
          pay_method: 'both',
          mode: "LIVE"
        };

        Object.entries(fields).forEach(([key, value]) => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = key;
          input.value = String(value);
          form.appendChild(input);
        });

        document.body.appendChild(form);
        form.submit();
        // Note: The page will redirect, so no code after this will execute
      } else {
        throw new Error('Failed to initiate payment');
      }
    } catch (error) {
      console.error('Payment initiation error:', error);
      toast({
        title: 'Payment Failed',
        description: 'Unable to start payment. Please try again.',
        variant: 'destructive',
      });
      setIsProcessing(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsProcessing(true);

    try {
      // Validate required fields
      const requiredFields = ['firstName', 'lastName', 'email', 'address', 'city', 'state'];

      const missingFields = requiredFields.filter(field => !formData[field as keyof CheckoutFormData]);

      if (missingFields.length > 0) {
        toast({
          title: 'Missing Information',
          description: 'Please fill in all required fields.',
          variant: 'destructive',
        });
        setIsProcessing(false);
        return;
      }

      // Save new address if user entered one
      if (showNewAddressForm && formData.address) {
        const addressSaved = await saveNewAddress({
          first_name: formData.firstName,
          last_name: formData.lastName,
          phone: formData.phone,
          address_line_1: formData.address,
          city: formData.city,
          state: formData.state,
          postal_code: formData.postalCode
        });
        
        // Only continue if address was saved successfully
        if (!addressSaved) {
          setIsProcessing(false);
          return; // Stop the submission process
        }
      }

      // Show payment confirmation modal
      setShowPaymentModal(true);
      setIsProcessing(false);
    } catch (error) {
      console.error('Checkout error:', error);
      toast({
        title: 'Checkout Error',
        description: 'There was an error processing your checkout. Please try again.',
        variant: 'destructive',
      });
      setIsProcessing(false);
    }
  };

  // Handle order creation
  const createOrder = async () => {
    try {
      const orderData = items.map((item) => ({
        customer_id: user?.id,
        product: item.name,
        quantity: item.quantity,
        product_id: item.product_id,
        status: 'Pending',
        shop_id: 'default',
        order_image: getProductImageUrl(item.image_urls) || '',
      }));

      const result = await orderApi.createOrder({ products: orderData });
      if (result.success) {
        return true;
      } else {
        throw new Error(result.message || 'Failed to create order');
      }
    } catch (error) {
      console.error('Order creation error:', error);
      return false;
    }
  };

  // Handle WhatsApp order
  const handleWhatsAppOrder = async () => {
    setIsProcessing(true);

    try {
      // Create order in database
      const orderCreated = await createOrder();

      if (orderCreated) {
        // Prepare WhatsApp message
        let message = `📦 *New Order from Kasuwa Mall*\n\n`;
        message += `👤 *Customer Details:*\n`;
        message += `Name: ${formData.firstName} ${formData.lastName}\n`;
        message += `Email: ${formData.email}\n`;
        message += `Phone: ${formData.phone}\n\n`;

        message += `📍 *Delivery Address:*\n`;
        message += `${formData.address}\n`;
        message += `${formData.city}, ${formData.state} ${formData.postalCode}\n\n`;

        message += `🛒 *Order Items:*\n`;
        items.forEach((item, index) => {
          message += `${index + 1}. ${item.name}\n`;
          message += `   Quantity: ${item.quantity}\n`;
          message += `   Price: ₦${item.price.toLocaleString()}\n`;
          message += `   Subtotal: ₦${(item.price * item.quantity).toLocaleString()}\n\n`;
        });

        message += `💰 *Order Summary:*\n`;
        message += `Subtotal: ₦${getTotalPrice().toLocaleString()}\n`;
        message += `Shipping: ₦2,500\n`;
        message += `Tax: ₦${Math.round(getTotalPrice() * 0.075).toLocaleString()}\n`;
        message += `*Total: ₦${(getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)).toLocaleString()}*\n\n`;

        message += `⚠️ *Important:* Do not make payment until you receive your order.\n`;
        message += `📞 *Support:* +2349067393633`;

        // Admin WhatsApp Number
        const adminWhatsAppNumber = '+2347030975118';
        const whatsappUrl = `https://wa.me/${adminWhatsAppNumber}?text=${encodeURIComponent(message)}`;

        // Clear cart
        clearCart();

        // Open WhatsApp
        window.open(whatsappUrl, '_blank');

        // Show success
        setOrderSuccess(true);
        setShowPaymentModal(false);

        toast({
          title: 'Order Sent Successfully!',
          description: 'Your order has been sent via WhatsApp. Our team will respond within 24 hours.',
        });
      } else {
        throw new Error('Failed to create order');
      }
    } catch (error) {
      console.error('WhatsApp order error:', error);
      toast({
        title: 'Order Failed',
        description: 'There was an error processing your order. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
    }
  };

  // Handle bank transfer
  const handleBankTransfer = async () => {
    setIsProcessing(true);

    try {
      // Create order
      const orderCreated = await createOrder();

      if (orderCreated) {
        clearCart();
        setOrderSuccess(true);
        setShowPaymentModal(false);

        toast({
          title: 'Order Placed!',
          description: 'Please make payment to the provided bank details. Your order will be processed after payment confirmation.',
        });
      }
    } catch (error) {
      console.error('Bank transfer error:', error);
      toast({
        title: 'Order Failed',
        description: 'There was an error processing your order. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsProcessing(false);
    }
  };

  // Interswitch payment parameters
  const paymentParameters = {
    merchantCode: "MX162337",
    payItemID: "Default_Payable_MX162337",
    customerEmail: user?.email || '',
    redirectURL: "http://localhost:5173", // This should match your frontend URL
    text: "Pay with Interswitch",
    mode: "LIVE", // Use TEST for development, LIVE for production
    transactionReference: transactionRef,
    amount: ((getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)) * 100).toString(),
    style: {
      width: "200px",
      height: "40px",
      border: "none",
      color: "#fff",
      backgroundColor: "#552b2b",
      borderRadius: "5px",
    },
    callback: (response: any) => {
      console.log(response);
      paymentCallback(response);
    },
  };

  // Handle payment confirmation
  const handlePaymentConfirmation = async () => {
    const selectedMethod = paymentMethods.find(method => method.id === selectedPaymentMethod);

    switch (selectedMethod?.type) {
      case 'whatsapp':
        await handleWhatsAppOrder();
        break;
      case 'card':
        setShowPaymentModal(false);
        await handleCardPayment();
        break;
      case 'transfer':
        await handleBankTransfer();
        break;
      default:
        toast({
          title: 'Invalid Payment Method',
          description: 'Please select a valid payment method.',
          variant: 'destructive',
        });
    }
  };

  // Show success page if order completed
  if (orderSuccess) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-kasuwa-primary/5 to-kasuwa-secondary/5 py-12">
        <div className="container mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="max-w-md mx-auto bg-white rounded-2xl shadow-xl p-8 text-center"
          >
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <CheckCircle className="h-8 w-8 text-green-600" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">Order Confirmed!</h1>
            <p className="text-gray-600 mb-6">
              {selectedPaymentMethod === 'whatsapp'
                ? 'Your order has been sent via WhatsApp. Our team will contact you within 24 hours.'
                : selectedPaymentMethod === 'card'
                ? 'Your payment has been processed and order confirmed.'
                : 'Your order has been placed. Please make payment to the provided bank details.'}
            </p>
            <Button
              onClick={() => navigate('/')}
              className="bg-kasuwa-primary hover:bg-kasuwa-primary/90 w-full"
            >
              Continue Shopping
            </Button>
          </motion.div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-kasuwa-primary/5 to-kasuwa-secondary/5 py-8">
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="max-w-6xl mx-auto"
        >
          {/* Header with user info */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <h1 className="text-3xl font-bold bg-gradient-to-r from-kasuwa-primary to-kasuwa-secondary bg-clip-text text-transparent">
                Checkout
              </h1>
              <Badge variant="outline" className="text-kasuwa-primary border-kasuwa-primary">
                {getTotalItems()} items
              </Badge>
            </div>
            <div className="flex items-center space-x-2 text-gray-600">
              <User className="h-4 w-4" />
              <span>Welcome back, {user?.firstname} {user?.lastname}</span>
              <span className="text-gray-400">•</span>
              <Mail className="h-4 w-4" />
              <span>{user?.email}</span>
              {user?.phone && (
                <>
                  <span className="text-gray-400">•</span>
                  <Phone className="h-4 w-4" />
                  <span>{user?.phone}</span>
                </>
              )}
            </div>
          </div>

          <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Checkout Form */}
              <div className="lg:col-span-2 space-y-6">
                <Card className="glass-card">
                  <CardHeader>
                    <CardTitle className="flex items-center text-2xl">
                      <MapPin className="h-6 w-6 mr-3 text-kasuwa-primary" />
                      Shipping Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {/* Address Selection */}
                    <div>
                      <Label className="text-base font-medium mb-4 block">Choose Delivery Address</Label>

                      {loadingAddresses ? (
                        <div className="space-y-3">
                          {[1, 2].map((i) => (
                            <div key={i} className="flex items-start space-x-3 p-4 border rounded-lg">
                              <div className="w-4 h-4 bg-gray-200 rounded-full animate-pulse mt-1" />
                              <div className="flex-1 space-y-2">
                                <div className="h-4 bg-gray-200 rounded animate-pulse w-1/3" />
                                <div className="h-3 bg-gray-200 rounded animate-pulse w-full" />
                                <div className="h-3 bg-gray-200 rounded animate-pulse w-2/3" />
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="space-y-4">
                          {/* Selected Address Display */}
                          {selectedAddress ? (
                            <motion.div
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              className="p-4 border rounded-lg bg-kasuwa-primary/5 border-kasuwa-primary"
                            >
                              <div className="flex items-start justify-between">
                                <div className="flex-1">
                                  <div className="flex items-center space-x-2 mb-2">
                                    {(() => {
                                      const IconComponent = getAddressIcon(selectedAddress.address_type);
                                      return <IconComponent className="h-5 w-5 text-kasuwa-primary" />;
                                    })()}
                                    <span className="font-medium">
                                      {selectedAddress.first_name} {selectedAddress.last_name}
                                    </span>
                                    {selectedAddress.is_default && (
                                      <Badge variant="outline" className="text-xs">Default</Badge>
                                    )}
                                  </div>
                                  <div className="text-sm text-gray-600">
                                    <p>{selectedAddress.address_line_1}</p>
                                    {selectedAddress.address_line_2 && <p>{selectedAddress.address_line_2}</p>}
                                    <p>{selectedAddress.city}, {selectedAddress.state} {selectedAddress.postal_code}</p>
                                    <p>{selectedAddress.phone}</p>
                                  </div>
                                </div>
                                <Button
                                  type="button"
                                  variant="outline"
                                  size="sm"
                                  onClick={handleChangeAddress}
                                  className="text-kasuwa-primary border-kasuwa-primary hover:bg-kasuwa-primary hover:text-white"
                                >
                                  Change
                                </Button>
                              </div>
                            </motion.div>
                          ) : (
                            <motion.div
                              initial={{ opacity: 0 }}
                              animate={{ opacity: 1 }}
                              className="p-4 border-2 border-dashed border-gray-300 rounded-lg text-center"
                            >
                              <MapPin className="h-10 w-10 text-gray-400 mx-auto mb-3" />
                              <p className="text-gray-600 mb-3">
                                {savedAddresses.length === 0
                                  ? 'No saved addresses found. Add your delivery address to continue.'
                                  : 'Select a delivery address'
                                }
                              </p>
                              <Button
                                type="button"
                                onClick={handleChangeAddress}
                                className="bg-kasuwa-primary hover:bg-kasuwa-primary/90"
                              >
                                <Plus className="h-4 w-4 mr-2" />
                                {savedAddresses.length === 0 ? 'Add Address' : 'Select Address'}
                              </Button>
                            </motion.div>
                          )}

                          {/* Option to add new address */}
                          {savedAddresses.length > 0 && !showNewAddressForm && (
                            <Button
                              type="button"
                              variant="outline"
                              onClick={() => setShowNewAddressForm(true)}
                              className="w-full border-dashed border-2 hover:border-kasuwa-primary hover:text-kasuwa-primary"
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              Add New Address for This Order
                            </Button>
                          )}
                        </div>
                      )}
                    </div>

                    {/* New Address Form */}
                    {showNewAddressForm && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        className="space-y-4 p-4 bg-gray-50 rounded-lg"
                      >
                        <h4 className="font-medium text-gray-900">New Address Details</h4>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="firstName">First Name *</Label>
                            <Input
                              id="firstName"
                              name="firstName"
                              value={formData.firstName}
                              onChange={handleInputChange}
                              placeholder="First name"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="lastName">Last Name *</Label>
                            <Input
                              id="lastName"
                              name="lastName"
                              value={formData.lastName}
                              onChange={handleInputChange}
                              placeholder="Last name"
                              required
                            />
                          </div>
                        </div>

                        <div>
                          <Label htmlFor="phone">Phone Number *</Label>
                          <Input
                            id="phone"
                            name="phone"
                            type="tel"
                            value={formData.phone}
                            onChange={handleInputChange}
                            placeholder="Phone number"
                            required
                          />
                        </div>

                        <div>
                          <Label htmlFor="address">Address *</Label>
                          <Input
                            id="address"
                            name="address"
                            value={formData.address}
                            onChange={handleInputChange}
                            placeholder="Street address"
                            required
                          />
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="city">City *</Label>
                            <Input
                              id="city"
                              name="city"
                              value={formData.city}
                              onChange={handleInputChange}
                              placeholder="City"
                              required
                            />
                          </div>
                          <div>
                            <Label htmlFor="state">State *</Label>
                            <Input
                              id="state"
                              name="state"
                              value={formData.state}
                              onChange={handleInputChange}
                              placeholder="State"
                              required
                            />
                          </div>
                        </div>

                        <div>
                          <Label htmlFor="postalCode">Postal Code</Label>
                          <Input
                            id="postalCode"
                            name="postalCode"
                            value={formData.postalCode}
                            onChange={handleInputChange}
                            placeholder="Postal code"
                          />
                        </div>
                      </motion.div>
                    )}

                    {/* Email (always visible) */}
                    <div>
                      <Label htmlFor="email">Email *</Label>
                      <Input
                        id="email"
                        name="email"
                        type="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        placeholder="Email address"
                        required
                      />
                    </div>
                  </CardContent>
                </Card>

                <Card className="glass-card">
                  <CardHeader>
                    <CardTitle className="flex items-center text-2xl">
                      <CreditCard className="h-6 w-6 mr-3 text-kasuwa-primary" />
                      Payment Method
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <RadioGroup value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod}>
                      {paymentMethods.map((method) => {
                        const IconComponent = method.icon;
                        return (
                          <div key={method.id} className="flex items-start space-x-3 p-4 border rounded-lg hover:bg-gray-50 cursor-pointer transition-all">
                            <RadioGroupItem value={method.id} id={method.id} className="mt-1" />
                            <div className="flex-1">
                              <Label htmlFor={method.id} className="cursor-pointer">
                                <div className="flex items-center space-x-2 mb-2">
                                  <IconComponent className="h-5 w-5 text-kasuwa-primary" />
                                  <span className="font-medium">{method.name}</span>
                                  {method.id === 'whatsapp' && (
                                    <Badge variant="outline" className="text-xs">Recommended</Badge>
                                  )}
                                </div>
                                <p className="text-sm text-gray-600">{method.description}</p>
                              </Label>
                            </div>
                          </div>
                        );
                      })}
                    </RadioGroup>

                    {/* Payment method specific information */}
                    {selectedPaymentMethod === 'transfer' && (
                      <Alert className="bg-blue-50 border-blue-200">
                        <Banknote className="h-4 w-4" />
                        <AlertDescription>
                          <div className="space-y-2 mt-2">
                            <div className="font-semibold">Bank Transfer Details:</div>
                            <div className="text-sm space-y-1">
                              <div><strong>Bank:</strong> Keystone Bank</div>
                              <div><strong>Account Number:</strong> 1013842470</div>
                              <div><strong>Account Name:</strong> Prospora Tech Nigeria Limited</div>
                            </div>
                          </div>
                        </AlertDescription>
                      </Alert>
                    )}

                    {selectedPaymentMethod === 'whatsapp' && (
                      <Alert className="bg-green-50 border-green-200">
                        <Smartphone className="h-4 w-4" />
                        <AlertDescription>
                          <div className="space-y-2 mt-2">
                            <div className="font-semibold">WhatsApp Order Process:</div>
                            <div className="text-sm space-y-1">
                              <div>• Your order details will be sent via WhatsApp</div>
                              <div>• Our team will respond within 24 hours</div>
                              <div>• Do not make payment until you receive your order</div>
                              <div>• Support: +2349067393633</div>
                            </div>
                          </div>
                        </AlertDescription>
                      </Alert>
                    )}

                    {selectedPaymentMethod === 'card' && (
                      <Alert className="bg-purple-50 border-purple-200">
                        <Lock className="h-4 w-4" />
                        <AlertDescription>
                          <div className="space-y-2 mt-2">
                            <div className="font-semibold">Secure Card Payment:</div>
                            <div className="text-sm space-y-1">
                              <div>• Powered by Interswitch payment gateway</div>
                              <div>• Card details entered securely on Interswitch platform</div>
                              <div>• Supports Visa, Mastercard, and Verve</div>
                              <div>• No card information stored on our servers</div>
                            </div>
                          </div>
                        </AlertDescription>
                      </Alert>
                    )}
                  </CardContent>
                </Card>
              </div>

              {/* Order Summary */}
              <div>
                <Card className="glass-card sticky top-8">
                  <CardHeader>
                    <CardTitle className="text-2xl">Order Summary</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {getTotalItems() > 0 ? (
                      <>
                        {/* Cart Items */}
                        <div className="space-y-3 max-h-96 overflow-y-auto pr-2">
                          {items.map((item) => (
                            <div key={item.product_id} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                              <img
                                src={getProductImageUrl(item.image_urls) || '/images/no-image-placeholder-optimized.jpg'}
                                alt={item.name}
                                className="w-16 h-16 object-cover rounded"
                                loading="lazy"
                              />
                              <div className="flex-1 min-w-0">
                                <h4 className="font-medium text-sm truncate">{item.name}</h4>
                                <p className="text-xs text-gray-500">Qty: {item.quantity}</p>
                              </div>
                              <div className="text-right">
                                <p className="font-medium">₦{(item.price * item.quantity).toLocaleString()}</p>
                              </div>
                            </div>
                          ))}
                        </div>

                        {/* Order Totals */}
                        <div className="space-y-2 pt-4 border-t border-gray-200">
                          <div className="flex justify-between">
                            <span>Subtotal ({getTotalItems()} items)</span>
                            <span>₦{getTotalPrice().toLocaleString()}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Shipping</span>
                            <span>₦2,500</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Tax</span>
                            <span>₦{Math.round(getTotalPrice() * 0.075).toLocaleString()}</span>
                          </div>
                          <Separator />
                          <div className="flex justify-between font-semibold text-lg">
                            <span>Total</span>
                            <span>₦{(getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)).toLocaleString()}</span>
                          </div>
                        </div>
                      </>
                    ) : (
                      <div className="text-center py-8">
                        <ShoppingCart className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                        <p className="text-muted-foreground">No items in cart</p>
                      </div>
                    )}

                    <Button
                      type="submit"
                      className="w-full bg-gradient-to-r from-kasuwa-primary to-kasuwa-secondary hover:from-kasuwa-primary/90 hover:to-kasuwa-secondary/90 text-white"
                      size="lg"
                      disabled={getTotalItems() === 0 || isProcessing}
                    >
                      {isProcessing ? (
                        <>
                          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                          Processing...
                        </>
                      ) : (
                        <>
                          {selectedPaymentMethod === 'whatsapp' && <Smartphone className="h-5 w-5 mr-2" />}
                          {selectedPaymentMethod === 'card' && <CreditCard className="h-5 w-5 mr-2" />}
                          {selectedPaymentMethod === 'transfer' && <Banknote className="h-5 w-5 mr-2" />}
                          {selectedPaymentMethod === 'whatsapp' ? 'Send Order via WhatsApp' :
                           selectedPaymentMethod === 'card' ? 'Pay with Card' :
                           'Place Order'} (₦{getTotalItems() > 0 ? (getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)).toLocaleString() : '0'})
                        </>
                      )}
                    </Button>
                  </CardContent>
                </Card>
              </div>
            </div>
          </form>

          {/* Payment Confirmation Modal */}
          <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>
            <DialogContent className="sm:max-w-md">
              <DialogHeader>
                <DialogTitle className="flex items-center">
                  {selectedPaymentMethod === 'whatsapp' && <Smartphone className="h-5 w-5 mr-2 text-green-600" />}
                  {selectedPaymentMethod === 'card' && <CreditCard className="h-5 w-5 mr-2 text-blue-600" />}
                  {selectedPaymentMethod === 'transfer' && <Banknote className="h-5 w-5 mr-2 text-purple-600" />}
                  Confirm Your Order
                </DialogTitle>
                <DialogDescription>
                  Please review your order details before proceeding.
                </DialogDescription>
              </DialogHeader>

              <div className="space-y-4">
                {/* Order Summary */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Order Summary</h4>
                  <div className="space-y-1 text-sm">
                    <div className="flex justify-between">
                      <span>Items ({getTotalItems()})</span>
                      <span>₦{getTotalPrice().toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Shipping</span>
                      <span>₦2,500</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Tax</span>
                      <span>₦{Math.round(getTotalPrice() * 0.075).toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between font-semibold pt-2 border-t">
                      <span>Total</span>
                      <span>₦{(getTotalPrice() + 2500 + Math.round(getTotalPrice() * 0.075)).toLocaleString()}</span>
                    </div>
                  </div>
                </div>

                {/* Payment Method Info */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Payment Method</h4>
                  <div className="flex items-center space-x-2">
                    {selectedPaymentMethod === 'whatsapp' && <Smartphone className="h-4 w-4 text-green-600" />}
                    {selectedPaymentMethod === 'card' && <CreditCard className="h-4 w-4 text-blue-600" />}
                    {selectedPaymentMethod === 'transfer' && <Banknote className="h-4 w-4 text-purple-600" />}
                    <span className="text-sm">
                      {paymentMethods.find(method => method.id === selectedPaymentMethod)?.name}
                    </span>
                  </div>
                </div>

                {/* Delivery Address */}
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Delivery Address</h4>
                  <div className="text-sm text-gray-600">
                    <div>{formData.firstName} {formData.lastName}</div>
                    <div>{formData.address}</div>
                    <div>{formData.city}, {formData.state} {formData.postalCode}</div>
                    <div>{formData.phone}</div>
                  </div>
                </div>
              </div>

              <DialogFooter className="flex-col space-y-2">
                {selectedPaymentMethod === 'card' ? (
                  <>
                    <Button 
                      onClick={handlePaymentConfirmation}
                      className="w-full bg-gradient-to-r from-kasuwa-primary to-kasuwa-secondary hover:from-kasuwa-primary/90 hover:to-kasuwa-secondary/90 text-white"
                      disabled={isProcessing}
                    >
                      {isProcessing ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                          Processing...
                        </>
                      ) : (
                        <>
                          <CreditCard className="h-4 w-4 mr-2" />
                          Pay with Card
                        </>
                      )}
                    </Button>
                  </>
                ) : (
                  <Button
                    onClick={handlePaymentConfirmation}
                    className="w-full bg-gradient-to-r from-kasuwa-primary to-kasuwa-secondary hover:from-kasuwa-primary/90 hover:to-kasuwa-secondary/90 text-white"
                    disabled={isProcessing}
                  >
                    {isProcessing ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Processing...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Confirm Order
                      </>
                    )}
                  </Button>
                )}
              </DialogFooter>
            </DialogContent>
          </Dialog>

          {/* Address Modal */}
          <AddressModal
            isOpen={showAddressModal}
            onClose={() => setShowAddressModal(false)}
            userId={user?.id || ''}
            onAddressSelect={handleAddressSelect}
            selectedAddressId={selectedAddressId || undefined}
          />
        </motion.div>
      </div>
    </div>
  );
}